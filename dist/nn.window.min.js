window.NN=function(t){var n={};function o(i){if(n[i])return n[i].exports;var e=n[i]={i:i,l:!1,exports:{}};return t[i].call(e.exports,e,e.exports,o),e.l=!0,e.exports}return o.m=t,o.c=n,o.d=function(t,n,i){o.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:i})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,n){if(1&n&&(t=o(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var e in t)o.d(i,e,function(n){return t[n]}.bind(null,e));return i},o.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(n,"a",n),n},o.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},o.p="",o(o.s=4)}([function(t,n){function o(t,n,i,e){this.id=o.uid(t.id,n.id),this.from=t,this.to=n,this.weight=null==i?2*Math.random()-1:i,this.toJSON=function(){return{id:this.id,from:this.from.id,to:this.to.id,weight:this.weight}}}o.uid=function(t,n){return.5*(t+n)*(t+n+1)+n},t.exports=o},function(t,n,o){const i=o(2),e=o(0);function r(t={}){this.id=t.id||r.uid(),this.type=null==t.type?"hidden":t.type,this.bias=null==t.bias?2*Math.random()-1:t.bias,this.connections=[],this.optimizer={},this.optimizer.rate,this.optimizer.momentum,this.optimizer.decay,this.optimizer.alpha,this.optimizer.beta,this.optimizer.gamma,this.squash,this.cost,this.incoming={targets:{},weights:{},connections:{}},this.outgoing={targets:{},weights:{},connections:{}},this._output,this.output,this.error,this._error,this.connect=function(t,n){const o=new e(this,t,n);this.outgoing.targets[t.id]=t,this.outgoing.connections[t.id]=o,t.incoming.targets[this.id]=this,t.incoming.connections[this.id]=o,this.outgoing.weights[t.id]=t.incoming.weights[this.id]=null==n?2*Math.random()-1:n,this.outgoing.connections[o.id]=t.incoming.connections[o.id]=o},this.activate=function(t){const n=this;function o(t){return 1/(1+Math.exp(-t))}if(null!=t)this._output=1,this.output=t;else{const t=Object.keys(this.incoming.targets).reduce(function(t,o,i){return t+n.incoming.targets[o].output*n.incoming.weights[o]},this.bias);this._output=o(i=t)*(1-o(i)),this.output=o(t)}var i;return this.output},this.propagate=function(t,n=.3){const o=this,i=null==t?Object.keys(this.outgoing.targets).reduce(function(t,i,e){return o.outgoing.targets[i].incoming.weights[o.id]=o.outgoing.weights[i]-=n*o.outgoing.targets[i].error*o.output,t+o.outgoing.targets[i].error*o.outgoing.weights[i]},0):this.output-t;return this.error=i*this._output,this.bias-=n*this.error,this.error},this.toJSON=function(){return{id:this.id,bias:this.bias,type:this.type}},this.weights=function(t){return(t=t||{json:!0}).json?{incoming:Object.values(this.incoming.weights),outgoing:Object.values(this.outgoing.weights)}:[Object.values(this.incoming.weights),Object.values(this.outgoing.weights)]}}r.neurons=0,r.uid=function(){return++r.neurons},r.activations={SIGMOID:function(t,n){const o=1/(1+Math.exp(-t));return n?i.clamp(o*(1-o)):i.clamp(o)},RELU:function(t,n){if(t>0){return n?1:i.clamp(t)}return 0},TANH:function(t,n){const o=Math.tanh(t);return n?i.clamp(1-o*o):i.clamp(o)},IDENTITY:function(t,n){return n?1:i.clamp(t)},STEP:function(t,n){return t>0&&n?1:0}},r.optimizers={SGD:function(){},NESTEROV:function(){},RMSPROP:function(){},ADAGRAD:function(){},ADADELTA:function(){},ADAM:function(){},AMSGRAD:function(){},ADAMAX:function(){},NADAM:function(){}},t.exports=r},function(t,n){const o=function(){};o.clamp=function(t){return t===1/0?Number.MAX_VALUE:t===-1/0?-Number.MAX_VALUE:t},t.exports=o},function(t,n,o){const i=o(1),e=o(0);function r(t,n){this.neurons=null==t?[]:Array.from({length:t},function(){return new i(n)}),this.connect=function(t,n){const o=this;this.neurons.forEach(function(i,e){t.neurons.forEach(function(t,r){n?i.connect(t,n[o.neurons.length*e+r]):i.connect(t)})})},this.activate=function(t){return this.neurons.map(function(n,o){return t?n.activate(t[o]):n.activate()})},this.propagate=function(t,n=.3){return this.neurons.map(function(n,o){return t?n.propagate(t[o]):n.propagate()})}}r.connect=function(t,n){const o=[];for(let i=0;i<t.length;i++)for(let r=0;r<n.length;r++)o.push(new e(t[i],n[r]));return o},t.exports=r},function(t,n,o){const i={_:o(2),Connection:o(0),Neuron:o(1),Group:o(3),Network:o(5)};t.exports=i},function(t,n,o){const i=o(0),e=o(1);o(3);function r(t,n,o){this.id=r.uid(),this.neurons=[],this.connections=[],this.activate=function(t){return 2*Math.random()-1},this.propagate=function(t){return 2*Math.random()-1},this.toJSON=function(){return{neurons:this.neurons.flat(1/0).map(function(t){return t.toJSON()}),connections:this.connections.flat(1/0).map(function(t){return t.toJSON()})}},this.toGraph=function(t,n){const{neurons:o,connections:i}=this.toJSON(),e=new vis.DataSet(o.map(function(t){return t.label=`${t.id}`,t.color="input"===t.type?"gray":"output"===t.type?"lime":"orange",t})),r=new vis.DataSet(i.map(function(t){return t.arrows="to",t}));return"string"==typeof t&&(t=document.getElementById(t)),n=n||{edges:{smooth:{type:"cubicBezier",forceDirection:"horizontal"}},layout:{heirarchichal:{direction:"LR",sortMethod:"directed"}},physics:!1},new vis.Network(t,{nodes:e,edges:r},n)}}r.networks=0,r.uid=function(){return++r.networks},r.fromSizes=function(t){const n=new r;t.map(function(o,i){const r=[];for(let n=0;n<o;n++){const n=new e;i===t.length-1?n.type="output":0===i&&(n.type="input"),r.push(n)}return n.neurons.push(r),r});let o=n.neurons[0];return n.neurons.slice(1,n.neurons.length).forEach(function(t,e){for(let e=0;e<o.length;e++)for(let r=0;r<t.length;r++)n.connections.push(new i(o[e],t[r]));o=t}),n},r.fromShape=function(t,n){const o=new r;[t,n].map(function(t,n){const i=[];for(let o=0;o<t;o++){const t=new e;1===n?t.type="output":0===n&&(t.type="input"),i.push(t)}return o.neurons.push(i),i});let u=o.neurons[0];return o.neurons.slice(1,o.neurons.length).forEach(function(t,n){for(let n=0;n<u.length;n++)for(let e=0;e<t.length;e++)o.connections.push(new i(u[n],t[e]));u=t}),o},r.fromGenome=function(t){const n=new r;return t.neurons.forEach(function(t){n.neurons.push(new e(t))}),t.connections.forEach(function(t){const o=n.neurons.find(function(n){return n.id===t.from}),e=n.neurons.find(function(n){return n.id===t.to});n.connections.push(new i(o,e,t.weight))}),n},t.exports=r}]);